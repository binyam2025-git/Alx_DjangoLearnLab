# C:\Users\user\Alx_DjangoLearnLab\advanced_features_and_security\LibraryProject\LibraryProject\settings.py

import os
from pathlib import Path

"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(1v^tkjw7poj*)w88xz33c+_v#p#ooav+g%5^(5it5z62f-ll(' # Keep your generated key

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to True for development/debugging, False for production.
DEBUG = True # Set to True for development ease

# When DEBUG is False, you must configure ALLOWED_HOSTS.
# For local testing, '127.0.0.1' and 'localhost' are sufficient.
# For deployment, you'd add your domain names.
ALLOWED_HOSTS = ['127.00.1', 'localhost'] # Corrected: '127.0.0.1'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your custom user app should be listed here, typically before other apps
    # that might depend on it, and before django.contrib.admin if you plan
    # to customize admin for CustomUser.
    'accounts', # Using 'accounts' as confirmed by your previous settings
    'bookshelf',
    'relationship_app',
    'practice_relationships',
    'csp', # For Content Security Policy
    'rest_framework',
]

# Configure your custom user model
AUTH_USER_MODEL = 'accounts.CustomUser' # Points to CustomUser in your 'accounts' app


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware', # Add this line for Content Security Policy, ideally after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Ensure this line is present and correctly points to your project's root 'templates' folder
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Addis_Ababa' # Confirmed this timezone previously

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# This is crucial for Django to find static files in your apps and custom directories
STATICFILES_DIRS = [
    # This first entry is common for project-wide static files (e.g., LibraryProject/static/)
    os.path.join(BASE_DIR, 'static'),
    # This entry tells Django to look for static files inside your 'practice_relationships' app's static directory
    os.path.join(BASE_DIR, 'practice_relationships', 'static'),
]

# This is where Django will collect all static files when you run 'python manage.py collectstatic'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Login/Logout Redirect URLs
LOGIN_REDIRECT_URL = "/accounts/profile/" # Assuming you'll have a profile view in accounts app
LOGOUT_REDIRECT_URL = "/accounts/profile/" # Or '/' if you prefer to redirect to home


# Email configuration for password reset (Development only - prints to console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025
DEFAULT_FROM_EMAIL = 'webmaster@yourdomain.com'
SERVER_EMAIL = 'webmaster@yourdomain.com'


# Security Headers (Adjusted for DEBUG=True development)
# When DEBUG is True, you typically don't run over HTTPS, so
# these secure flags should be False to prevent issues.
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY' # Prevents clickjacking by forbidding embedding in iframes
SECURE_CONTENT_TYPE_NOSNIFF = True

CSRF_COOKIE_SECURE = False    # Set to False for HTTP development
SESSION_COOKIE_SECURE = False # Set to False for HTTP development

SECURE_SSL_REDIRECT = False # Set to False for HTTP development
SECURE_HSTS_SECONDS = 0 # Set to 0 or remove for development
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False

# Content Security Policy (CSP) - Updated format for django-csp 4.0+
# Ensure no old CSP_* variables (like CSP_DEFAULT_SRC, CSP_REPORT_ONLY = DEBUG)
# are present anywhere else in this file, as they conflict with the new dictionary format.
if DEBUG:
    # In development, use report-only mode to log violations without blocking content.
    # Set CONTENT_SECURITY_POLICY to an empty dictionary or omit it when using REPORT_ONLY.
    CONTENT_SECURITY_POLICY = {}
    CONTENT_SECURITY_POLICY_REPORT_ONLY = {
        'DIRECTIVES': {
            'default-src': ("'self'",),
            # 'unsafe-inline' and 'unsafe-eval' are generally bad practices for production.
            # Only use them in development if absolutely necessary for dev tools (e.g., hot-reloading).
            # Aim to replace them with nonces or hashes for production.
            'script-src': ("'self'", "'unsafe-inline'", "'unsafe-eval'"),
            'style-src': ("'self'", "'unsafe-inline'"),
            'img-src': ("'self'", "data:"), # Allow base64 encoded images (e.g., small icons)
            'font-src': ("'self'", "data:"), # Allow base64 encoded fonts
            # 'ws://127.0.0.1:8000' is for Django's dev server websockets (e.g., LiveReload).
            # Adjust or remove for production based on your websocket setup.
            'connect-src': ("'self'", "ws://127.0.0.1:8000"),
            'base-uri': ("'self'",),
            'object-src': ("'none'",), # Disallow plugins
            'frame-ancestors': ("'self'",), # Control embedding in iframes
            'form-action': ("'self'",), # Restrict form submissions
            # Add any external CDNs if you use them, e.g.:
            # 'script-src': ("'self'", "https://cdn.jsdelivr.net", "https://code.jquery.com"),
            # 'style-src': ("'self'", "https://cdn.jsdelivr.net"),
        },
        # Optional: Set a report URI for development to see reports, e.g., to console
        # 'REPORT_URI': '/csp-report/', # You'd need a view to handle this
    }

else:
    # For production (DEBUG=False), you would configure the actual enforced policy here.
    # Typically, CONTENT_SECURITY_POLICY_REPORT_ONLY would be an empty dict or omitted.
    CONTENT_SECURITY_POLICY = {
        'DIRECTIVES': {
            'default-src': ("'self'",),
            # In production, avoid 'unsafe-inline' and 'unsafe-eval'.
            # Use nonces or hashes for inline scripts/styles if absolutely required.
            'script-src': ("'self'",),
            'style-src': ("'self'",),
            'img-src': ("'self'",),
            'font-src': ("'self'",),
            'connect-src': ("'self'",),
            'base-uri': ("'self'",),
            'object-src': ("'none'",),
            'frame-ancestors': ("'self'",),
            'form-action': ("'self'",),
            # Add any external CDNs if you use them in production:
            # 'script-src': ("'self'", "https://cdn.jsdelivr.net", "https://code.jquery.com"),
            # 'style-src': ("'self'", "https://cdn.jsdelivr.net"),
        },
        'REPORT_URI': '/csp-report/', # Essential for production to collect violation reports
        # 'REPORT_ONLY': False, # This key is part of the CONTENT_SECURITY_POLICY dict, as per the documentation
    }
    # In production, when enforcing, CONTENT_SECURITY_POLICY_REPORT_ONLY should be an empty dictionary.
    CONTENT_SECURITY_POLICY_REPORT_ONLY = {}
