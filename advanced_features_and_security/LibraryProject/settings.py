"""
Django settings for temp_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os # Make sure os is imported for os.path.join

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h^aag3ia&tm8@7t3+x&_v1w@rn3fwp47@o#!8eq0-nbo-fc5*9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # For development, keep True. For production, set to False.

ALLOWED_HOSTS = [] # In production, this should contain your domain names, e.g., ['yourdomain.com', 'www.yourdomain.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your custom apps go here
    'bookshelf',
    'practice_relationships',
    'accounts',
    'relationship_app',
    'csp', # <--- ADD THIS LINE FOR DJANGO-CSP
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware', # <--- ADD THIS LINE FOR DJANGO-CSP (Place it high in the list)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'temp_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Often useful to have a project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'temp_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Addis_Ababa' # Changed from 'UTC' based on previous context

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static', # This tells Django to look in a 'static' folder at your project root
]

STATIC_ROOT = BASE_DIR / 'staticfiles' # Location where collectstatic will put files (for production)


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Redirect URLs
LOGIN_REDIRECT_URL = '/' # Redirect to home page after login
LOGOUT_REDIRECT_URL = '/relationships_app/login/' # Redirect to login page after logout (or '/')
LOGIN_URL = '/relationships_app/login/' # URL where unauthenticated users are redirected for login

AUTH_USER_MODEL = 'accounts.CustomUser' # 'your_app_name.YourCustomUserClass'


# --- Content Security Policy (CSP) Settings ---
# These settings define what content sources are allowed by your browser.
# For more details, refer to: https://django-csp.readthedocs.io/en/latest/configuration.html
# And the CSP spec: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy

CSP_DEFAULT_SRC = ("'self'",) # Default source for most content types (scripts, images, etc.)
CSP_SCRIPT_SRC = ("'self'",) # Allow JavaScript from your own domain
CSP_STYLE_SRC = ("'self'",) # Allow CSS from your own domain
CSP_IMG_SRC = ("'self'",) # Allow images from your own domain
CSP_FONT_SRC = ("'self'",) # Allow fonts from your own domain
CSP_CONNECT_SRC = ("'self'",) # Allow XHR, WebSockets from your own domain
CSP_BASE_URI = ("'self'",) # Restrict the `base` element's `href` attribute
CSP_OBJECT_SRC = ("'none'",) # Disallow plugins (Flash, Java, etc.)
CSP_FRAME_ANCESTORS = ("'self'",) # Allow embedding of your site in iframes only from your own domain
CSP_FORM_ACTION = ("'self'",) # Restrict which URLs can be used as the action for HTML form submissions

# Optional: Set a report URI to receive CSP violation reports (e.g., if using a reporting service)
# CSP_REPORT_URI = '/csp-report/' # You would need a view to handle these reports

# Optional: Use report-only mode in development to test policies without blocking content
# CSP_REPORT_ONLY = DEBUG # This will send 'Content-Security-Policy-Report-Only' header if DEBUG is True

# Important: If you use CDNs or external resources, you'll need to add them to the relevant directives.
# Example:
# CSP_SCRIPT_SRC = ("'self'", "https://cdn.jsdelivr.net", "https://code.jquery.com")
# CSP_STYLE_SRC = ("'self'", "https://cdn.jsdelivr.net", "https://fonts.googleapis.com")
# CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")

# End of CSP Settings

# ==============================================================================
# HTTPS and Security Settings (Step 1, 2, 3)
# ==============================================================================
# Step 1: Configure Django for HTTPS Support
# SECURE_SSL_REDIRECT: Redirects all non-HTTPS requests to HTTPS.
# IMPORTANT: Only set to True in production after your web server is configured for HTTPS.
# In development (DEBUG=True), setting this to True will cause redirect loops if your dev server isn't HTTPS.
SECURE_SSL_REDIRECT = not DEBUG # Set to True for production, False for development
# SECURE_HSTS_SECONDS: Instructs browsers to only access the site via HTTPS for a specified time (in seconds).
# 31536000 seconds = 1 year. This prevents downgrade attacks.
# Only enable in production after ensuring HTTPS is fully functional, as it's hard to revert.
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0 # Set to 0 or comment out in development
# SECURE_HSTS_INCLUDE_SUBDOMAINS: Include all subdomains in the HSTS policy.
# Requires all subdomains to also be HTTPS.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True if not DEBUG else False
# SECURE_HSTS_PRELOAD: Allows browser vendors to include your site in a preload list for HSTS.
# Requires SECURE_HSTS_SECONDS and SECURE_HSTS_INCLUDE_SUBDOMAINS to be set.
# Only enable after submitting your domain to the HSTS preload list.
SECURE_HSTS_PRELOAD = True if not DEBUG else False

# Step 2: Enforce Secure Cookies
# SESSION_COOKIE_SECURE: Ensures session cookies are only transmitted over HTTPS.
SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE: Ensures CSRF cookies are only transmitted over HTTPS.
CSRF_COOKIE_SECURE = True

# Step 3: Implement Secure Headers
# X_FRAME_OPTIONS: Prevents your site from being embedded in iframes, protecting against clickjacking.
X_FRAME_OPTIONS = 'DENY'
# SECURE_CONTENT_TYPE_NOSNIFF: Prevents browsers from MIME-sniffing a response away from the declared content-type.
# Helps prevent XSS attacks.
SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XSS_FILTER: Enables the browserâ€™s built-in XSS filtering. (Deprecated in newer Django/browsers but still a good practice)
SECURE_BROWSER_XSS_FILTER = True
# ==============================================================================
# End HTTPS and Security Settings
# ==============================================================================